% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rmacrolite.r
\name{rmlPar}
\alias{rmlPar}
\title{Get or set default parameters for the package.}
\usage{
rmlPar(par = NULL, reset = FALSE, encoding, maxPathLength,
  fileNameTemplate, idWidth, tz, errorKeywords, handleErrors, balanceFile,
  macro_path, macro_exe, macro_exeparfile, macro_path_default,
  macro_exe_default, macro_exeparfile_default, digits_parfile_k,
  digits_dt50_depth_f, id_range, log_width)
}
\arguments{
\item{par}{Three possible cases: \itemize{ \item If \code{par} is \code{NULL}
(default): All the actual value of the parameters will be silently returned.
\item If \code{par} is a vector of character strings representing parameter
names. The value of the parameters named here will be (silently) returned.
\item If \code{par} is a list following the format \code{tag = value}, where
\code{tag} is the name of the parameter to be changed, and \code{value} is
its new value.  Such a list is returned by \code{rmlPar()}. Notice that
parameters can also be set individually, using the options listed below. }}

\item{reset}{Single logical. If TRUE, all the parameters will be set to their
default value. Values are reset before any change to the parameter values, as
listed below.}

\item{encoding}{Vector of three character strings. (1) \code{encoding} of the 
MACRO par file (when imported), passed to \code{\link{readLines}}, 
(2) \code{encoding} of the MACRO par file (when exported), 
passed to \code{\link{writeLines}} (via \code{\link{file}}), 
and (3) \code{encoding} of the MACRO crop parameter file 
(when imported).}

\item{maxPathLength}{Single integer value. Maximum length of a path for the
MACRO command line modules:}

\item{fileNameTemplate}{List of character strings, with two items, \code{"r"} and 
\code{"macro"}. \code{"macro"} is a single character string, 
the name and extension (but without path) of the default 
MACRO parameter files that is exported and MACRO output 
file to be generated. Should include the wilcard \code{\%s}, 
that will internally be replaced by the simulation ID 
(RUNID), and a second willcard \code{\%s} instead of the 
extension. For example \code{rml\%s.\%s} .
\code{"r"} is the same thing, except that it the the template 
for how the file should be renamed after it has been 
output by MACRO, or for how the package should name the 
files it generates.}

\item{idWidth}{Single integer value. Width of the formatted simulation 
ID in MACRO In FOCUS output files (bin-files). Also used 
for formatting the par-files generated by this package.}

\item{tz}{See \code{\link[base:as.POSIXlt]{as.POSIXct}}. Time zone.}

\item{errorKeywords}{Vector of character strings. Keywords that should be interpreted 
as an error or problem in MACRO command message output.}

\item{handleErrors}{Single character string. If set to \code{TRUE}, \code{rmacro} 
tries to handle error when running a list of MACRO simulations,
in order to avoid crashing the whole list.}

\item{balanceFile}{Single of character string. Name of the file containing output 
water and solute balance, as internally calculated by MACRO.}

\item{macro_path}{Single character string. Path to the folder where the MACRO 
or MACRO In FOCUS executable is installed. See 
\code{\link[rmacrolite:rmacroliteSetModelVar-methods]{rmacroliteSetModelVar}} and 
\code{\link[rmacrolite]{rmacrolite-system-variables}}.
If equal to \code{NULL} (the default), the value defined 
in the Windows Environment Variable called 
\code{rmacrolite_macro_path} will be used in the 1st 
place, when it exists, or alternatively the value in 
\code{macro_path_default} (see below)}

\item{macro_exe}{Single character string. Name of the the MACRO 
or MACRO In FOCUS executable to be used to run simulations, 
in the folder defined by \code{macro_path}. 
See \code{\link[rmacrolite:rmacroliteSetModelVar-methods]{rmacroliteSetModelVar}} and 
\code{\link[rmacrolite]{rmacrolite-system-variables}}.
If equal to \code{NULL} (the default), the value defined 
in the Windows Environment Variable called 
\code{rmacrolite_macro_exe} will be used in the 1st 
place, when it exists, or alternatively the value in 
\code{macro_exe_default} (see below)}

\item{macro_exeparfile}{Single character string. Name of the the "exeparfile" 
executable that converts par-files into MACRO input files 
(indump.tmp), in the folder defined by \code{macro_path}. 
Notice that the exeparfile is not provided with MACRO 
5.2, while it is provided with MACRO In FOCUS. It can thus 
be copied from the MACRO In FOCUS installation directory 
to the MACRO installation directory.
See \code{\link[rmacrolite:rmacroliteSetModelVar-methods]{rmacroliteSetModelVar}} and 
\code{\link[rmacrolite]{rmacrolite-system-variables}}.
If equal to \code{NULL} (the default), the value defined 
in the Windows Environment Variable called 
\code{rmacrolite_macro_exeparfile} will be used in 
the 1st place, when it exists, or alternatively the value in 
\code{macro_exeparfile_default} (see below)}

\item{macro_path_default}{Single character string. Default value for \code{macro_path} 
(see above).}

\item{macro_exe_default}{Single character string. Default value for \code{macro_exe} 
(see above).}

\item{macro_exeparfile_default}{Single character string. Default value for \code{macro_exeparfile} 
(see above).}

\item{digits_parfile_k}{Single integer values. Number of significant digits to be 
used when rounding degradation rates (DEMAL, DEGMAS, 
DEGMIL, DEGMIS) in the par-file when modifying degradation 
parameters.}

\item{digits_dt50_depth_f}{Single integer value. Number of digits to be used when 
rounding the factor describing DT50 decrease with depth 
when calculating the values from the par-file or writing 
new degradation values in a par-file.}

\item{id_range}{Vector of 2 integer values. Min and max value allowed for 
MACRO RUNID.}

\item{log_width}{Single integer value. Width of the log output messages 
(maximum number of characters). Notice that some messages 
may get larger.}
}
\description{
Get or set default parameters for the package. Notice changes done to the
parameter values are reset everytime the R session is closed and the package
is reloaded.
}
\details{
The function has 3 possible, non-exclusive behaviours: \itemize{ \item If
 \code{reset=TRUE}, resetting the parameters to their initial values, as
 defined in this function. \item (Silently) returning the actual value of the
 package parameters. If \code{par=NULL}, all the values are returned.  If
 \code{par} is a vector of parameter names, their value will be returned.
 \item Setting-up the value of some parameters, passing a list of parameter
 value to \code{par} OR setting some of the parameters listed above. }

 Notice that when \code{reset=TRUE} and some new parameter values are
 provided, the parameters are first reset, and then the new parameter values
 are set. If \code{par} is a list, parameters are set first according to
 values in \code{par}, and then according to values in the parameters listed
 below. This combination is not recommended, but nonetheless possible.

 The actual value of the parameters is stored in (and can be retrieved from)
 the environment \code{rspPars}. The default value of the parameters are
 stored in the environment \code{rspPars}. Do not use them directly.
}
\seealso{
\code{\link{getRmlPar}}.
}
